####################################################################################################################### string.h

#pragma once
#define _CRT_SECURE_NO_WARNINGS
#include <iostream>

class String
{
private:
    size_t capacity; //количество выделенной памяти для строки
    size_t size; //количество символов в строке
    char* data;
    
public:
    //конструкторы
    String();
    String(const char*);
    String(char);
    String(const String&);
    
    //оператор присваивания
    String& operator=(const String&);
    String& operator=(const char*);
    String& operator=(const char);
    
    //оператор сложения
    String operator+(const String&)const;
    String& operator+=(const String&);
    
    //операторы работы с потоками
    friend std::ostream& operator<<(std::ostream&, const String&);
    friend std::istream& operator>>(std::istream&,  String&);
    
    //оператор индексирования
    char& operator[](size_t);
    const char& operator[](size_t)const;
    
    //метод удаления
    String& erase(int , int );
    
    //операторы сравнения
    bool operator<(const String&)const;
    bool operator>(const String&)const;
    bool operator<=(const String&)const;
    bool operator>=(const String&)const;
    bool operator==(const String&)const;
    bool operator!=(const String&)const;
    
    //деструктор
    ~String();
    
    //проверка выделенной памяти
    bool checkMemory();
};


####################################################################################################################### string.cpp

#include "string.h"

//############################### конструкторы

String::String() : capacity(1), size(0), data(new char[capacity])
{
    data[0] = '\0';
}

String::String(const char*str): capacity(strlen(str)+1), size(strlen(str)), data(new char[capacity])
{
    strcpy(data, str);
}

String::String(char ch) : capacity(2), size(1), data(new char[capacity])
{
    data[0] = ch;
    data[1] = '\0';
}

String::String(const String& str)
{
    capacity = str.capacity;
    size = str.size;
    data = new char[capacity];
    strcpy(data, str.data);
}

//############################### операторы присваивания

String& String::operator=(const String& str)
{
    if (this!=&str)
    {
        delete[]data;
        size = str.size;
        capacity = str.capacity;
        data = new char[capacity];
        strcpy(data, str.data);
    }
    
    return *this;
}

String& String:: operator=(const char* str)
{
    delete[]data;
    size = strlen(str);
    capacity = size+1;
    data = new char[capacity];
    strcpy(data, str);
    return *this;
}

String& String:: operator=(const char symbol)
{
    delete[]data;
    size = 1;
    capacity = 2;
    data = new char[capacity];
    data[0] = symbol;
    data[1] = '\0';
    return *this;
}

//############################### операторы сложения

String String:: operator+(const String& str)const
{
    String temp;
    delete[]temp.data;
    temp.size = size + str.size;
    temp.capacity = temp.size + 1;
    temp.data = new char [temp.capacity];
    strcat(temp.data, data);
    strcat(temp.data, str.data);
    return temp;
}


String& String::operator+=(const String& str)
{
    size += str.size;
    
    if (checkMemory()) //если хватило памяти, то выполняем копирование
    {
        strcat(data, str.data);
    }
    else //если памяти не хватило, то создаем новый массив
    {
        capacity = size * 2;
        char* temp = new char[capacity];
        strcat(temp, data);
        strcat(temp, str.data);
        delete[]data;
        data = temp;
    }
    
    return *this;
}

//############################### операторы работы с потоками

std::ostream& operator<<(std::ostream&out, const String&str)
{
    out << str.data;
    return out;
}

std::istream& operator>>(std::istream&in, String&str)
{
    delete[]str.data;
    str.size = 0;
    str.capacity = 1;
    str.data = new char[str.capacity];
    str.data[0] = '\0';
    
    while (char symbol = in.get())
    {
        String temp(symbol);
        
        if (symbol == '\n') //если закончилась строка
        {
            break;
        }
        
        str += temp;
    }
    
    str.data[str.size + 1] = '\0';
    return in;
}

//############################### оператор индексирования

char& String::operator[](size_t index)
{
    if (index>size)
    {
        std :: cout << "Error index\n";
        return data[size+1];
    }
    
    return data[index];
}

const char& String::operator[](size_t index)const
{
    if (index > size)
    {
        std::cout << "Error index\n";
        return data[size+1];
    }
    
    return data[index];
}

//############################### метод удаления

String& String::erase(int pos, int count)
{
    if (pos > size)
    {
        std::cout << "Error position\n";
        return *this;
    }
    
    if (pos+count-(int)size >= 0)
    {
        data[pos] = '\0';
        size = pos;
        return *this;
    }
    
    memcpy(data + pos, data + pos + count, size - count - pos + 1);
    size -= count;
    return *this;
}

//############################### операторы сравнения

bool String:: operator<(const String& str)const
{
    if (strcmp(data, str.data) < 0)
    {
        return true;
    }
    
    return false;
}

bool String:: operator>(const String& str)const
{
    if (strcmp(data, str.data) > 0)
    {
        return true;
    }
    
    return false;
}

bool String:: operator<=(const String& str)const
{
    if (strcmp(data, str.data) < 1)
    {
        return true;
    }
    
    return false;
}

bool String:: operator>=(const String& str)const
{
    if (strcmp(data, str.data) > -1)
    {
        return true;
    }
    
    return false;
}

bool String:: operator==(const String& str)const
{
    if (strcmp(data, str.data) == 0)
    {
        return true;
    }
    
    return false;
}

bool String:: operator!=(const String& str)const
{
    if (strcmp(data, str.data) != 0)
    {
        return true;
    }
    
    return false;
}

//############################### деструктор

String::~String()
{
    delete[]data;
}

//############################### проверка выделенной памяти

bool String::checkMemory()
{
    if (size+1 < capacity) //если хватило памяти для записи
    {
        return true;
    }
    
    return false;
}
